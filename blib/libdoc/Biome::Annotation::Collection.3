.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Biome::Annotation::Collection 3"
.TH Biome::Annotation::Collection 3 "2009-08-22" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Greedy methods"
.IX Header "Greedy methods"
.Sh "\fIget_Annotations()\fP"
.IX Subsection "get_Annotations()"
.Vb 4
\& Usage   : my @annotations = $collection\->get_Annotations(\*(Aqkey\*(Aq)
\& Function: Retrieves all the Biome::Role::Annotate objects for a specific key
\& Returns : list of instances that Annotate \- empty if no objects stored for a key
\& Args    : string which is key for annotations
.Ve
.Sh "get_nested_Annotations"
.IX Subsection "get_nested_Annotations"
.Vb 8
\& Title   : get_nested_Annotations
\& Usage   : my @annotations = $collection\->get_nested_Annotations(
\&                                \*(Aq\-key\*(Aq => \e@keys,
\&                                \*(Aq\-recursive => 1);
\& Function: Retrieves all the Biome::Role::Annotate objects for one or more
\&           specific key(s). If \-recursive is set to true, traverses the nested 
\&           annotation collections recursively and returns all annotations 
\&           matching the key(s).
\&
\&           If no key is given, returns all annotation objects.
\&
\&           The returned objects will have their tagname() attribute set to
\&           the key under which they were attached, unless the tagname was
\&           already set.
\&
\& Returns : list of Biome::Role::Annotate \- empty if no objects stored for a key
\& Args    : \-keys      => arrayref of keys to search for (optional)
\&           \-recursive => boolean, whether or not to recursively traverse the 
\&            nested annotations and return annotations with matching keys.
.Ve
.Sh "get_all_Annotations"
.IX Subsection "get_all_Annotations"
.Vb 5
\& Title   : get_all_Annotations
\& Usage   :
\& Function: Similar to get_Annotations, but traverses and flattens nested
\&           annotation collections. This means that collections in the
\&           tree will be replaced by their components.
\&
\&           Keys will not be passed on to nested collections. I.e., if the
\&           tag name of a nested collection matches the key, it will be
\&           flattened in its entirety.
\&
\&           Hence, for un\-nested annotation collections this will be identical
\&           to get_Annotations.
\& Example :
\& Returns : an array of L<Biome::Role::Annotate> compliant objects
\& Args    : keys (list of strings) for annotations (optional)
.Ve
.Sh "get_num_Annotations"
.IX Subsection "get_num_Annotations"
.Vb 6
\& Title   : get_num_Annotations
\& Usage   : my $count = $collection\->get_num_Annotations()
\& Function: Returns the count of instances implementing Annotate role stored
\&           in this collection.
\& Returns : integer
\& Args    : none
.Ve
.Sh "\fIget_Annotation_keys()\fP"
.IX Subsection "get_Annotation_keys()"
.Vb 6
\& Usage   : $ac\->get_Annotation_keys()
\& Function: gives back a list of annotation keys, which are simple text strings
\& Returns : Array of strings
\& Args    : none
\& Status  : Unstable; as implemented in BioPerl (as get_all_annotation_keys),
\&           this only gives back the keys for this level (no nested names).
.Ve
.SH "Iterator-based methods"
.IX Header "Iterator-based methods"
.Sh "next_Annotation"
.IX Subsection "next_Annotation"
.Vb 9
\& Title   : next_Annotations
\& Usage   : my @annotations = $collection\->next_Annotation(\-keys => [\*(Aqfoo\*(Aq, \*(Aqba
\&            \-recursive => 1);
\& Function: Iterates through the contained Annotations
\& Returns : list of Biome::Role::Annotate \- empty if no objects stored for a key
\& Args    : \-keys      => arrayref of keys to search for (optional)
\&           \-recursive => boolean, whether or not to recursively traverse the 
\&            nested annotations and return annotations with matching keys.
\& Status  : Unstable
.Ve
.SH "Adding/removing annotation"
.IX Header "Adding/removing annotation"
.Sh "\fIadd_Annotation()\fP"
.IX Subsection "add_Annotation()"
.Vb 5
\& Usage   : $self\->add_Annotation(\*(Aqreference\*(Aq,$object);
\&           $self\->add_Annotation($object,\*(AqBio::MyInterface::DiseaseI\*(Aq);
\&           $self\->add_Annotation($object);
\&           $self\->add_Annotation(\*(Aqdisease\*(Aq,$object,\*(AqBio::MyInterface::DiseaseI\*(Aq);
\& Function: Adds an annotation for a specific key.
\&
\&           If the key is omitted, the object to be added must provide a value
\&           via its tagname().
\&
\&           If the archetype is provided, this and future objects added under
\&           that tag have to comply with the archetype and will be rejected
\&           otherwise.
\&
\& Returns : none
\& Args    : annotation key (\*(Aqdisease\*(Aq, \*(Aqdblink\*(Aq, ...)
\&           object to store (must implement Biome::Role::Annotate Role)
\&           [optional] object archetype to map future storage of object
\&           of these types to
\& Status  : Unstable (could allow removing specific annotations by an identifier)
.Ve
.Sh "\fIremove_Annotations()\fP"
.IX Subsection "remove_Annotations()"
.Vb 8
\& Usage   :
\& Function: Remove the annotations for the specified key from this collection.
\& Returns : an list of Biome::Role::Annotate compliant objects which were stored
\&           under the given key(s)
\& Args    : the key(s) (tag name(s), one or more strings) for which to
\&           remove annotations (optional; if none given, flushes all
\&           annotations)
\& Status  : Unstable (could allow removing specific annotations by an identifier)
.Ve
.Sh "flatten_Annotations"
.IX Subsection "flatten_Annotations"
.Vb 3
\& Title   : flatten_Annotations
\& Usage   :
\& Function: Flattens part or all of the annotations in this collection.
\&
\&           This is a convenience method for getting the flattened
\&           annotation for the given keys, removing the annotation for
\&           those keys, and adding back the flattened array.
\&
\&           This should not change anything for un\-nested collections.
\& Example :
\& Returns : an array Biome::Role::Annotate compliant objects which were stored
\&           under the given key(s)
\& Args    : list of keys (strings) the annotation for which to flatten,
\&           defaults to all keys if not given
\& Status  : Unknown
.Ve
