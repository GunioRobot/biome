.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Biome::Role::AnalysisResult 3"
.TH Biome::Role::AnalysisResult 3 "2009-08-22" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.Sh "analysis_query"
.IX Subsection "analysis_query"
.Vb 6
\& Usage     : $query_obj = $result\->analysis_query();
\& Purpose   : Get a Bio::PrimarySeqI\-compatible object representing the entity 
\&             on which the analysis was performed. Lacks sequence information.
\& Argument  : n/a
\& Returns   : A Bio::PrimarySeqI\-compatible object without sequence information.
\&             The sequence will have display_id, description, moltype, and length data.
.Ve
.Sh "analysis_subject"
.IX Subsection "analysis_subject"
.Vb 11
\& Usage     : $obj = $result\->analyis_subject();
\& Purpose   : Get the subject of the analysis against which it was
\&             performed. For similarity searches it will probably be a database,
\&             and for sequence feature predictions (exons, promoters, etc) it
\&             may be a collection of models or homologous sequences that were
\&             used, or undefined.
\& Returns   : An object of a type the depends on the implementation
\&             May also return undef for analyses that don\e\*(Aqt involve subjects.
\& Argument  : n/a
\& Comments  : Implementation of this method is optional.
\&             AnalysisResultI provides a default behavior of returning undef.
.Ve
.Sh "analysis_subject_version"
.IX Subsection "analysis_subject_version"
.Vb 6
\& Usage     : $vers = $result\->analyis_subject_version();
\& Purpose   : Get the version string of the subject of the analysis.
\& Returns   : String or undef for analyses that don\e\*(Aqt involve subjects.
\& Argument  : n/a
\& Comments  : Implementation of this method is optional.
\&             AnalysisResultI provides a default behavior of returning undef.
.Ve
.Sh "analysis_date"
.IX Subsection "analysis_date"
.Vb 4
\& Usage     : $date = $result\->analysis_date();
\& Purpose   : Get the date on which the analysis was performed.
\& Returns   : String
\& Argument  : n/a
.Ve
.Sh "analysis_method"
.IX Subsection "analysis_method"
.Vb 6
\& Usage     : $meth = $result\->analysis_method();
\& Purpose   : Get the name of the sequence analysis method that was used
\&             to produce this result (BLASTP, FASTA, etc.). May also be the
\&             actual name of a program.
\& Returns   : String
\& Argument  : n/a
.Ve
.Sh "analysis_method_version"
.IX Subsection "analysis_method_version"
.Vb 5
\& Usage     : $vers = $result\->analysis_method_version();
\& Purpose   : Get the version string of the analysis program.
\&           : (e.g., 1.4.9MP, 2.0a19MP\-WashU).
\& Returns   : String
\& Argument  : n/a
.Ve
.Sh "next_feature"
.IX Subsection "next_feature"
.Vb 8
\& Title   : next_feature
\& Usage   : $seqfeature = $obj\->next_feature();
\& Function: Returns the next feature available in the analysis result, or
\&           undef if there are no more features.
\& Example :
\& Returns : A Bio::SeqFeatureI implementing object, or undef if there are no
\&           more features.
\& Args    : none
.Ve
