.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Biome::Root 3"
.TH Biome::Root 3 "2009-08-22" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.Sh "verbose"
.IX Subsection "verbose"
.Vb 6
\& Title   : verbose
\& Usage   : $self\->verbose(1)
\& Function: Sets verbose flag for debugging output
\& Returns : The current verbosity setting (0 or 1)
\& Args    : 0 or 1 (Boolean value) 
\& Status  : Unstable
.Ve
.Sh "strict"
.IX Subsection "strict"
.Vb 10
\& Title   : strict
\& Usage   : $self\->strict(1)
\& Function: Sets strictness level for \->warn
\&           \-1 = no warnings
\&            0 = standard, small warning
\&            1 = warning with stack trace
\&            2 = converts warning to an exception
\& Returns : The current verbosity setting (integer between \-1 to 2)
\& Args    : \-1,0,1 or 2
\& Status  : Unstable
.Ve
.Sh "rearrange"
.IX Subsection "rearrange"
.Vb 10
\& Usage   : $object\->_rearrange( array_ref, list_of_arguments)
\& Purpose : Rearranges named parameters to requested order.
\& Example : $self\->_rearrange([qw(SEQUENCE ID DESC)],@param);
\&         : Where @param = (sequence => $s,
\&             :                 desc     => $d,
\&             :                 id       => $i);
\& Returns : @params \- an array of parameters in the requested order.
\&         : The above example would return ($s, $i, $d).
\&         : Unspecified parameters will return undef. For example, if
\&         :        @param = (sequence => $s);
\&         : the above _rearrange call would return ($s, undef, undef)
\& Argument: $order : a reference to an array which describes the desired
\&         :          order of the named parameters.
\&         : @param : an array of parameters, either as a list (in
\&         :          which case the function simply returns the list),
\&         :          or as an associative array with hyphenated tags
\&         :          (in which case the function sorts the values 
\&         :          according to @{$order} and returns that new array.)
\&             :        The tags can be upper, lower, or mixed case
\&         :          but they must start with a hyphen (at least the
\&         :          first one should be hyphenated.)
\& Source  : This function was taken from CGI.pm, written by Dr. Lincoln
\&         : Stein, and adapted for use in Bio::Seq by Richard Resnick and
\&         : then adapted for use in Bio::Root::Object.pm by Steve Chervitz,
\&         : then migrated into Bio::Root::RootI.pm by Ewan Birney.
\& Comments: Uppercase tags are the norm, 
\&         : (SAC)
\&         : This method may not be appropriate for method calls that are
\&         : within in an inner loop if efficiency is a concern.
\&         :
\&         : Parameters can be specified using any of these formats:
\&         :  @param = (\-name=>\*(Aqme\*(Aq, \-color=>\*(Aqblue\*(Aq);
\&         :  @param = (\-NAME=>\*(Aqme\*(Aq, \-COLOR=>\*(Aqblue\*(Aq);
\&         :  @param = (\-Name=>\*(Aqme\*(Aq, \-Color=>\*(Aqblue\*(Aq);
\&         :  @param = (\*(Aqme\*(Aq, \*(Aqblue\*(Aq);
\&         : A leading hyphenated argument is used by this function to 
\&         : indicate that named parameters are being used.
\&         : Therefore, the (\*(Aqme\*(Aq, \*(Aqblue\*(Aq) list will be returned as\-is.
\&         :
\&             : Note that Perl will confuse unquoted, hyphenated tags as 
\&         : function calls if there is a function of the same name 
\&         : in the current namespace:
\&         :    \-name => \*(Aqfoo\*(Aq is interpreted as \-&name => \*(Aqfoo\*(Aq
\&             :
\&         : For ultimate safety, put single quotes around the tag:
\&             : (\*(Aq\-name\*(Aq=>\*(Aqme\*(Aq, \*(Aq\-color\*(Aq =>\*(Aqblue\*(Aq);
\&         : This can be a bit cumbersome and I find not as readable
\&         : as using all uppercase, which is also fairly safe:
\&             : (\-NAME=>\*(Aqme\*(Aq, \-COLOR =>\*(Aqblue\*(Aq);
\&             :
\&         : Personal note (SAC): I have found all uppercase tags to
\&         : be more managable: it involves less single\-quoting,
\&         : the key names stand out better, and there are no method naming 
\&         : conflicts.
\&         : The drawbacks are that it\*(Aqs not as easy to type as lowercase,
\&         : and lots of uppercase can be hard to read.
\&         :
\&         : Regardless of the style, it greatly helps to line
\&             : the parameters up vertically for long/complex lists.
\&         :
\&         : Note that if @param is a single string that happens to start with
\&         : a dash, it will be treated as a hash key and probably fail to
\&         : match anything in the array_ref, so not be returned as normally
\&         : happens when @param is a simple list and not an associative array.
\& Status  : Unstable (this may change into a trait for optional use)
.Ve
